{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1952cb90_382ff705",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/subscribe/KafkaEventDeserializer.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-04-24T02:23:40Z",
      "side": 1,
      "message": "Throwing an exception as \"normal path\" isn\u0027t a good design choice, throwing an NPE on purpose is even worse.\n\nWhy not simply checking the json string for some pattern and use the correct path? (EventMessage vs. Event)",
      "range": {
        "startLine": 54,
        "startChar": 13,
        "endLine": 54,
        "endChar": 35
      },
      "revId": "cc238ac6a9a04e63fbc6373e38f23ecc161502e3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "241af299_374b950d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/subscribe/KafkaEventDeserializer.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-04-29T05:21:34Z",
      "side": 1,
      "message": "I agree it\u0027s kind of a code smell. \nI\u0027m catching NPE because this is what is thrown from result.validate()\n\nPlease have in mind that for most of the time we will get EventMessage. Only time when we will receive Event is during the rolling upgrade.\n\nI was thinking of checking the string but I thought that it could be even more error prone. Another option was to parse json string to JsonObject and then check but I didn\u0027t want to parse string twice knowing that in 99% it will be EventMessage.\n\nWDYT?",
      "parentUuid": "1952cb90_382ff705",
      "range": {
        "startLine": 54,
        "startChar": 13,
        "endLine": 54,
        "endChar": 35
      },
      "revId": "cc238ac6a9a04e63fbc6373e38f23ecc161502e3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd30d84a_373d389d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/subscribe/KafkaEventDeserializer.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2021-04-29T07:51:44Z",
      "side": 1,
      "message": "Would something like this work?\n    \n    Object genericEvent \u003d gson.fromJson(json, Object.class);\n    if (genericEvent.getClass() \u003d\u003d EventMessage.class) {\n        EventMessage em \u003d (EventMessage) genericEvent;\n    } else {\n        Event em \u003d (Evente) genericEvent;\n    }",
      "parentUuid": "241af299_374b950d",
      "range": {
        "startLine": 54,
        "startChar": 13,
        "endLine": 54,
        "endChar": 35
      },
      "revId": "cc238ac6a9a04e63fbc6373e38f23ecc161502e3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e49d5a7_58f1a69a",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/subscribe/KafkaEventDeserializer.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-04-30T00:43:10Z",
      "side": 1,
      "message": "Yes, that\u0027s an idea.\n\nAnother idea could be checking some elements in the incoming JSON object to understand if it is an Event or EventMessage.\n\nCatching NPE is definitely dangerous and you are never sure to catch what you want and instead you could be swallowing some other dangerous situation.",
      "parentUuid": "bd30d84a_373d389d",
      "range": {
        "startLine": 54,
        "startChar": 13,
        "endLine": 54,
        "endChar": 35
      },
      "revId": "cc238ac6a9a04e63fbc6373e38f23ecc161502e3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82af5bd1_3039e0e1",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/subscribe/KafkaEventDeserializer.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-04-30T05:13:58Z",
      "side": 1,
      "message": "\u003e    Object genericEvent \u003d gson.fromJson(json, Object.class);\n\u003e    if (genericEvent.getClass() \u003d\u003d EventMessage.class) {\n\u003e        EventMessage em \u003d (EventMessage) genericEvent;\n\u003e    } else {\n\u003e        Event em \u003d (Evente) genericEvent;\n\u003e    }\n\nThat would be the best but I don\u0027t see how this would work. Json doesn\u0027t contains object type so when we parse to Object.class GSon will use reflection to find Object fields and populate them. Rest of the fields will be dropped. So in our case GSon will return instance of Object not an instance of EventMessage casted to Object.\n\nOk, if NPE is a not go I will implement checking the sting content",
      "parentUuid": "7e49d5a7_58f1a69a",
      "range": {
        "startLine": 54,
        "startChar": 13,
        "endLine": 54,
        "endChar": 35
      },
      "revId": "cc238ac6a9a04e63fbc6373e38f23ecc161502e3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d752a2fb_f1380fa8",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/subscribe/KafkaEventDeserializer.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-05-01T01:25:42Z",
      "side": 1,
      "message": "\u003e Ok, if NPE is a not go I will implement checking the sting content\n\nWhy not just checking that the Json object contains a \"header\" and \"body\"? If yes, then it is an EventMessage, otherwise is an Event: would that work?",
      "parentUuid": "82af5bd1_3039e0e1",
      "range": {
        "startLine": 54,
        "startChar": 13,
        "endLine": 54,
        "endChar": 35
      },
      "revId": "cc238ac6a9a04e63fbc6373e38f23ecc161502e3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}