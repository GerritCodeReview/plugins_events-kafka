{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cf96e3dc_31ff9d69",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/Module.java",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-11-03T08:55:43Z",
      "side": 1,
      "message": "To be consistent this should be named KafkaRestProducerProvider, but still I believe we should hide this logic in KafkaProducerProvider",
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1bb681d_f0234d55",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/Module.java",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T01:37:13Z",
      "side": 1,
      "message": "See my comment above on that.",
      "parentUuid": "cf96e3dc_31ff9d69",
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14530404_9d656ff0",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/Module.java",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-11-04T19:17:25Z",
      "side": 1,
      "message": "I understand why we have this logic here what I was wondering why native produce is created with provider while the rest one is not:\n`bind(new TypeLiteral\u003cProducer\u003cString, String\u003e\u003e() {}).toProvider(KafkaProducerProvider.class);`\n\n`bind(new TypeLiteral\u003cProducer\u003cString, String\u003e\u003e() {}).to(KafkaRestProducer.class);`",
      "parentUuid": "a1bb681d_f0234d55",
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b4e0635_bf60e0da",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/Module.java",
        "patchSetId": 6
      },
      "lineNbr": 58,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T19:46:13Z",
      "side": 1,
      "message": "That is because KafkaRestProducer is a class written by us that has the @Inject annotation on its constructor and therefore can be instantiated automatically.\n\nThe KafkaProducer instead is a class of Kafka and doesn\u0027t contain any @Inject annotation, therefore cannot be instantiated automatically but needs us to write a small provider to tell Guice how to create instances of it.\n\nHope that makes sense.",
      "parentUuid": "14530404_9d656ff0",
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "834a44b4_76cf1b41",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/Module.java",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-11-03T08:55:43Z",
      "side": 1,
      "message": "Why this logic is here not in KafkaProducerProvider? Then KafkaProducerProvider can decide if we should have REST or Native producer",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 62,
        "endChar": 5
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e371bd02_fc431607",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/Module.java",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T00:57:18Z",
      "side": 1,
      "message": "In Gerrit we typically do configuration-based injections in the Module and not in the Provider\u003c\u003e code.",
      "parentUuid": "834a44b4_76cf1b41",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 62,
        "endChar": 5
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03af304e_dcc4795a",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/Module.java",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-11-04T19:17:25Z",
      "side": 1,
      "message": "Interesting, because this is exactly the purpose of the Provider, to create instance based on the configuration. But ok if this is the pattern we have in Gerrit I\u0027m fine with that",
      "parentUuid": "e371bd02_fc431607",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 62,
        "endChar": 5
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "498141eb_6d37459e",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/config/KafkaProperties.java",
        "patchSetId": 6
      },
      "lineNbr": 131,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-11-02T21:03:29Z",
      "side": 1,
      "message": "nit: this looks like a getter of the restApiUri property, but it\u0027s type signature mismatch (Optional\u003cURI\u003e vs URI).\n\nConsider making this a standard getter by returning Optional\u003cURI\u003e and call `get()` on it where it is consumed KafkaRestProducerL183)",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 131,
        "endChar": 27
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98cc60d1_6d8d5057",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/config/KafkaProperties.java",
        "patchSetId": 6
      },
      "lineNbr": 131,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-11-03T08:55:43Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "498141eb_6d37459e",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 131,
        "endChar": 27
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b672a0d0_37b8d904",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/config/KafkaProperties.java",
        "patchSetId": 6
      },
      "lineNbr": 131,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T00:57:18Z",
      "side": 1,
      "message": "I don\u0027t think we need an Optional either, if we do the validation when the configuration is created already consistent.",
      "parentUuid": "98cc60d1_6d8d5057",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 131,
        "endChar": 27
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26a4b317_ff03c092",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/config/KafkaProperties.java",
        "patchSetId": 6
      },
      "lineNbr": 135,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-11-02T21:03:29Z",
      "side": 1,
      "message": "client type REST and no rest API URL provided is an invalid configuration.\nAs such, we should probably fail fast: should we do this at L57?\n\nWe are already throwing an IllegalArgumentException when an invalid URL is provided, we might as well throw also when rest URL is not provided at all.",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 135,
        "endChar": 92
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e0d0ed5_4df78155",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/config/KafkaProperties.java",
        "patchSetId": 6
      },
      "lineNbr": 135,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T00:57:18Z",
      "side": 1,
      "message": "Right, will move to L57.",
      "parentUuid": "26a4b317_ff03c092",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 135,
        "endChar": 92
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36904749_7748dd9f",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-11-02T21:03:29Z",
      "side": 1,
      "message": "Why building this for *every* POST request?\n\nThe proxy configuration is not changing throughout the lifetime of the Gerrit process\n\nConsider building this only once.",
      "range": {
        "startLine": 110,
        "startChar": 0,
        "endLine": 112,
        "endChar": 49
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d7d6678_c5257710",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T01:37:13Z",
      "side": 1,
      "message": "True, possibly just binding it with Guice to a singleton?",
      "parentUuid": "36904749_7748dd9f",
      "range": {
        "startLine": 110,
        "startChar": 0,
        "endLine": 112,
        "endChar": 49
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b96198b5_7a1b3867",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-11-04T19:53:28Z",
      "side": 1,
      "message": "Sure, or even a memoized value.\nJust a nit though, can be done as a follow up change.",
      "parentUuid": "7d7d6678_c5257710",
      "range": {
        "startLine": 110,
        "startChar": 0,
        "endLine": 112,
        "endChar": 49
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b623300e_409b5776",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 157,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-11-03T08:55:43Z",
      "side": 1,
      "message": "should we honour the timeout? It\u0027s an edge case that http connection will hang but it can happen",
      "range": {
        "startLine": 157,
        "startChar": 14,
        "endLine": 157,
        "endChar": 19
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23090e87_23321045",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 157,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T01:37:13Z",
      "side": 1,
      "message": "The HTTP close doesn\u0027t have timeouts: how would you honour it?",
      "parentUuid": "b623300e_409b5776",
      "range": {
        "startLine": 157,
        "startChar": 14,
        "endLine": 157,
        "endChar": 19
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e600ea04_85181296",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 157,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-11-04T19:17:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "23090e87_23321045",
      "range": {
        "startLine": 157,
        "startChar": 14,
        "endLine": 157,
        "endChar": 19
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "737b6ad7_d58dffd7",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-11-02T21:03:29Z",
      "side": 1,
      "message": "nit: consider making this a constant value with a descriptive name.",
      "range": {
        "startLine": 164,
        "startChar": 39,
        "endLine": 164,
        "endChar": 84
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d439de81_0d7e35e6",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T01:37:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "737b6ad7_d58dffd7",
      "range": {
        "startLine": 164,
        "startChar": 39,
        "endLine": 164,
        "endChar": 84
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "260b3eba_82c157cb",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-11-03T08:55:43Z",
      "side": 1,
      "message": "should we also get the message why it failed not just the status?",
      "range": {
        "startLine": 167,
        "startChar": 58,
        "endLine": 167,
        "endChar": 71
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d138c08_95694423",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T00:57:18Z",
      "side": 1,
      "message": "You mean the response status body as well?",
      "parentUuid": "260b3eba_82c157cb",
      "range": {
        "startLine": 167,
        "startChar": 58,
        "endLine": 167,
        "endChar": 71
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa58325c_5cec0f79",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-11-04T19:17:25Z",
      "side": 1,
      "message": "yes",
      "parentUuid": "7d138c08_95694423",
      "range": {
        "startLine": 167,
        "startChar": 58,
        "endLine": 167,
        "endChar": 71
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5a6e545_97377b1d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T19:46:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa58325c_5cec0f79",
      "range": {
        "startLine": 167,
        "startChar": 58,
        "endLine": 167,
        "endChar": 71
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4897726e_6527d7d2",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 173,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-11-03T08:55:43Z",
      "side": 1,
      "message": "Consider using gson parser",
      "range": {
        "startLine": 173,
        "startChar": 8,
        "endLine": 173,
        "endChar": 55
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3ff2e62_a91df3f3",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 173,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T00:57:18Z",
      "side": 1,
      "message": "Actually here it would be overkill and potentially dangerous, because the record.value() already contains a JSON fragment in String format.\n\nUsing a Gson parser would escape the record.value() which is something we do not want.",
      "parentUuid": "4897726e_6527d7d2",
      "range": {
        "startLine": 173,
        "startChar": 8,
        "endLine": 173,
        "endChar": 55
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c47a6a2e_de4a00ba",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 178,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-11-02T21:03:29Z",
      "side": 1,
      "message": "nit: consider method reference\n\n.map(URL::toString)",
      "range": {
        "startLine": 178,
        "startChar": 0,
        "endLine": 178,
        "endChar": 37
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a179531_6009345d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaRestProducer.java",
        "patchSetId": 6
      },
      "lineNbr": 178,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T01:37:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c47a6a2e_de4a00ba",
      "range": {
        "startLine": 178,
        "startChar": 0,
        "endLine": 178,
        "endChar": 37
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51325446_c0b228f8",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-11-02T21:03:29Z",
      "side": 1,
      "message": "I can\u0027t find any documentation for `clientType`",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 28
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2479ee9b_6385c26a",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-11-03T08:55:43Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "51325446_c0b228f8",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 28
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33d03ddd_ca6054e1",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T00:57:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2479ee9b_6385c26a",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 28
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9a3e5e5_8e8279f3",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/kafka/api/KafkaBrokerApiTest.java",
        "patchSetId": 6
      },
      "lineNbr": 179,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-11-03T08:55:43Z",
      "side": 1,
      "message": "kafka client is always native so this can be Optional.empty() which will be the case in real life, now I\u0027m not sure what kafkaRest.getApiURI will return",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 179,
        "endChar": 3
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "891a56ae_02416974",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/kafka/api/KafkaBrokerApiTest.java",
        "patchSetId": 6
      },
      "lineNbr": 179,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T00:57:18Z",
      "side": 1,
      "message": "I\u0027ve remove the method and just used an instance variable, initialised to ClientType.REST in the REST-based test.",
      "parentUuid": "a9a3e5e5_8e8279f3",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 179,
        "endChar": 3
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40da0d86_050a78e2",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/kafka/api/KafkaBrokerApiTest.java",
        "patchSetId": 6
      },
      "lineNbr": 179,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-11-04T19:17:25Z",
      "side": 1,
      "message": "But this doesn\u0027t change much. Correct me if I\u0027m wrong but in real life setup when client is native we do not set kafka rest uri but in this test we do that in L206 and L224",
      "parentUuid": "891a56ae_02416974",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 179,
        "endChar": 3
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17839d3a_d102492e",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/kafka/api/KafkaBrokerApiTest.java",
        "patchSetId": 6
      },
      "lineNbr": 179,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T19:46:13Z",
      "side": 1,
      "message": "Gotcha, you are right, the URL shouldn\u0027t be set here.\nIt should be done now.",
      "parentUuid": "40da0d86_050a78e2",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 179,
        "endChar": 3
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80f88eed_3ea1ef9d",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/kafka/api/KafkaBrokerRestApiTest.java",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-11-03T08:55:43Z",
      "side": 1,
      "message": "Should we extract common part for Native and Rest to a separate class something like KafkaBrokerApiTestBase and the both KafkaBrokerRestApiTest and KafkaBrokerApiTest can extend it. With current implementation we cannot have native specific tests and we are mixing the Rest specific code with native one",
      "range": {
        "startLine": 33,
        "startChar": 13,
        "endLine": 33,
        "endChar": 35
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4727821f_025d7882",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/kafka/api/KafkaBrokerRestApiTest.java",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-04T00:57:18Z",
      "side": 1,
      "message": "Yes, I know, but the question is: do we even have native-specific test cases?",
      "parentUuid": "80f88eed_3ea1ef9d",
      "range": {
        "startLine": 33,
        "startChar": 13,
        "endLine": 33,
        "endChar": 35
      },
      "revId": "71c3d6301eb21c38098300fa1681b78f23ae3241",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}